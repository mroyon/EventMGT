services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    networks:
       - bmc-net
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27018:27017"
    networks:
       - bmc-net
  sqlserver:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sqlserver
    environment:
        - ACCEPT_EULA=Y
        - SA_PASSWORD=KafEvent007
        - DESTINATION=/tmp/script.sql
        - URL=https://drive.google.com/uc?id=1ATnHqnglHl85NXksk7dLu2Z3losM0OKu&export=download
    user: root
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -C -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s
    command:
      - /bin/bash
      - -c
      - |
       
        # Download the SQL script using wget
        wget -v --no-check-certificate -O $$DESTINATION $$URL && echo 'Download succeeded!' || echo 'Download failed!'
        # Use dockerize to wait for SQL Server to be ready
        /opt/mssql/bin/sqlservr &
        # Wait 30 seconds for it to be available
        # (lame, I know, but there's no nc available to start prodding network ports)
        sleep 30
        # Run every script in /scripts
        # TODO set a flag so that this is only done once on creation, 
        # and not every time the container runs
        # dockerize -wait tcp://sqlserver:1433 -timeout 60s
        echo "SQL Server is ready!"
        # Run the SQL script using sqlcmd
        echo "SA_PASSWORD: $$SA_PASSWORD, DESTINATION: $$DESTINATION"
        /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P $$SA_PASSWORD -i $$DESTINATION -C
        # Finally, start SQL Server after the script runs
        #/opt/mssql/bin/sqlservr
    networks:
       - bmc-net
  
  webadmin:
    image: bmc-digest
    container_name: webadmin
    build:
      context: .
      dockerfile: WebAdmin/Dockerfile
    ports:
      - "5001:5001"
    environment:
      ASPNETCORE_URLS: "http://0.0.0.0:5001"
      ASPNETCORE_ENVIRONMENT: "Production"
      REDIS_CONNECTION: "redis:6380"  # Redis service name and port
      MONGODB_CONNECTION: "mongo:27018"  # MongoDB connection string
      DB_CONNECTION_STRING: "Server=sqlserver,1433;Database=EventMGT;User Id=sa;Password=KafEvent007;"  # SQL Server connection string
    depends_on:
      - redis
      - mongo
      - sqlserver
    networks:
       - bmc-net

networks:
  bmc-net:
    driver: bridge
