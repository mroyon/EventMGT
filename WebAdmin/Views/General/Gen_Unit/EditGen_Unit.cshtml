@using CLL
@model BDO.Core.DataAccessObjects.Models.gen_unitEntity
@inject CLL.Localization.LocalizeService SharedLocalizer

@using Microsoft.Extensions.Options
@{
    ViewData["Title"] = "Edit View Gen Unit";
}


<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-footer">
                <h5 class="card-title">@SharedLocalizer.GetLocalizedHtmlString("EDIT_GEN_UNIT")</h5>
            </div>
            <!-- /.card-header -->
            <form method="POST" id="frmEditGen_Unit" class="my-login-validation" novalidate="" autocomplete="off">
                <div class="card-body">
					 <div class="row ">
							 <input asp-for="unitid" type="hidden" />
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="labelNormal required " asp-for="unit"></label>
                                <input asp-for="unit" class="form-control" autocomplete="off" required />
                                <span asp-validation-for="unit" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="labelNormal required " asp-for="unitcode"></label>
                                <input asp-for="unitcode" class="form-control" required></input>
                                <span asp-validation-for="unitcode" class="unitcodeerror text-danger" id="unitcodeerror"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <label class="labelNormal" asp-for="file"></label>
                            <input asp-for="file" class="form-control" />
                            <span asp-validation-for="file" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row" style="margin-bottom:1%;">
                        <div class="col-md-6">
                            @if (!string.IsNullOrEmpty(Model.ex_nvarchar1))
                            {
                                <img src="@Model.ex_nvarchar1" alt="Unit Logo" style="border: 1px dotted green;" width="200" height="200" />
                            }
                            else
                            {
                                <p>No image found!</p>
                            }
                        </div>
                    </div>
                    <div class="row btn-toolbar">
                        <div class="col-md-6 ">
                            <div class="form-group">
                                <button type="submit" id="btnEditGen_Unit" class="btn btn-primary btn-md"><i class="fa fa-save"></i> @SharedLocalizer.GetLocalizedHtmlString("SUBMIT_REQUEST")</button>
                                <button id="btnGoBackGen_Unit" class="btn btn-secondary btn-md "><i class="fas fa-arrow-circle-left"></i> @SharedLocalizer.GetLocalizedHtmlString("GO_BACK")</button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <!-- ./card-body -->
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12">

                    <!-- /.description-block -->
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.card-footer -->
    </div>
    <!-- /.card -->
</div>
<!-- /.col -->


@section Scripts {
    <script src="~/lib/customjs/Gen_Unit/Gen_Unit.js"></script>
    <script>

        var LandingGen_Unit = "/Gen_Unit/LandingGen_Unit";

        function RedirectToLanding(params) {
            if (typeof params != 'undefined')
                window.location.href = params;
        }

        // Get the template HTML and remove it from the doument
        var previewNode = document.querySelector("#template");
        previewNode.id = "";
        var previewTemplate = previewNode.parentNode.innerHTML;
        previewNode.parentNode.removeChild(previewNode);

        // Initialize Dropzone but prevent automatic upload
        Dropzone.autoDiscover = false;

        var myDropzone = new Dropzone(document.body,
            {
                url: "/Gen_Unit/EditGen_Unit",  // API endpoint
                method: "post",
                paramName: "files",  // The name for the files being uploaded
                uploadMultiple: true,  // Allow multiple file uploads
                //maxFilesize: 5,  // Max file size in MB
                parallelUploads: 5,  // Number of files to upload in parallel
                autoProcessQueue: false,  // Don't upload files immediately
                addRemoveLinks: false,
                acceptedFiles: ".jpeg,.jpg,.png,.gif",
                thumbnailWidth: 60,
                thumbnailHeight: 60,
                previewTemplate: previewTemplate,
                previewsContainer: "#previews",
                clickable: ".fileinput-button",
                init: function () {
                    var dropzoneInstance = this;
                    // The Dropzone instance is fully initialized here
                    console.log("Dropzone initialized.");
                    console.log(dropzoneInstance.files); // Should not be null here

                    var dataobject = {
                        eventid: $("#unitid").val(),
                    };

                    function LoadFiles() {
                        ajaxPostObjectHandler("/Gen_Unit/GetAllFileByEventId", dataobject, function (files) {
                            files.forEach(file => {
                                // Mock the file structure for Dropzone
                                var mockFile = { name: file.filetitle, size: file.filesize };

                                // Manually add the file to Dropzone
                                dropzoneInstance.emit("addedfile", mockFile);
                                dropzoneInstance.emit("thumbnail", mockFile, file.FileUrl); // Thumbnail if available

                                // Make the file marked as uploaded
                                dropzoneInstance.emit("complete", mockFile);
                                dropzoneInstance.files.push(mockFile);


                                // Set a custom attribute or flag to identify it as an old file
                                mockFile.isOld = true;
                                mockFile.eventfileid = file.eventfileid;
                                mockFile.eventid = file.eventid;
                                mockFile.FileUrl = file.FileUrl;
                                mockFile.filename = file.filename;

                                // Set the file description if available (assuming you store this info on the server)
                                var descriptionInput = $(mockFile.previewElement).find(".file-description");
                                descriptionInput.val(file.filedescription || ""); // Load saved description



                            });

                        }, true);
                    }

                    LoadFiles();

                    dropzoneInstance.on("removedfile", function (file) {
                        if (file.isOld) {
                            // Handle old file deletion on the server
                            console.log(file);
                            var dataobject = {
                                eventfileid: file.eventfileid,
                                eventid: file.eventid,
                                FileUrl: file.FileUrl,
                                filename: file.filename
                            };
                            ajaxPostObjectHandler("/Gen_Unit/DeleteGen_EventFileInfo", dataobject, function (response) {
                                //LoadFiles();
                            }, true);

                        }
                    });

                    // On form submission
                    document.querySelector("#btnEditGen_Unit").addEventListener("click", function (e) {
                        e.preventDefault();
                        if (_cusFormValidate('frmEditGen_Unit')) {
                            $.blockUI();


                            var formData = new FormData();
                            formData.append("unitid", $("#unitid").val());
                            formData.append("unit", $("#unit").val());
                            formData.append("unitcode", $("#unitcode").val());
                            formData.append("ex_nvarchar3", $("#ex_nvarchar3").val());

                            // Get all files (new and old)
                            var allFiles = dropzoneInstance.files;  // This contains all files (new + old)

                            let index = 0;
                            allFiles.forEach(file => {
                                if (file.eventfileid) //Handle Old Files
                                {
                                    var descriptionInput = file.previewElement.querySelector(".file-description");
                                    if (descriptionInput.value)
                                        formData.append("postedFiles[" + index + "].fileDescription", descriptionInput.value);
                                    else
                                        formData.append("postedFiles[" + index + "].fileDescription", "");

                                    formData.append("postedFiles[" + index + "].eventfileid", file.eventfileid);
                                    formData.append("postedFiles[" + index + "].eventfileid", file.eventid);
                                    index++;
                                }
                            })

                            if (dropzoneInstance.getQueuedFiles().length > 0) {
                                dropzoneInstance.processQueue();
                                //dropzoneInstance.on("queuecomplete", function () {
                                dropzoneInstance.getAcceptedFiles().forEach(file => {
                                    var descriptionInput = file.previewElement.querySelector(".file-description");
                                    if (descriptionInput.value)
                                        formData.append("postedFiles[" + index + "].fileDescription", descriptionInput.value);
                                    else
                                        formData.append("postedFiles[" + index + "].fileDescription", "");
                                    formData.append("postedFiles[" + index + "].file", file);
                                    index++;
                                });
                                SubmitFormData(formData);
                                //});
                            }
                            else {
                                SubmitFormData(formData);
                            }
                        }

                    });
                    function SubmitFormData(formData) {

                        ajaxPostObjectHandlerWithFiles("/Gen_Unit/EditGen_Unit", formData, function (response) {
                            $.unblockUI();
                            if (response._ajaxresponse.responsestatus == "success") {
                                showSuccessAlert("Success", response._ajaxresponse.responsetext, "OK", RedirectToLanding, LandingGen_Unit);
                            }
                        }, false);
                    }


                }

            });





    </script>
}





